from pymetasploit3.msfrpc import MsfRpcClient
from flask import jsonify

# Store exploit search result in MariaDB
import mysql.connector

# using calendar and time modules to read the current timestamp
import calendar;
import time;

import requests
import json
import re

from bs4 import BeautifulSoup

############### SecOPERA Databe endpoint
SecOPERA_url = "http://127.0.0.1:8000"
############### SecOPERA Databe endpoint

########################################### Database functions
def create_connection():
    """Create a database connection."""
    connection = None
    try:
        connection = mysql.connector.connect(
            host='localhost',
            user='secoperauser',  # Use your username
            passwd='secSMNd4a5!',    # Use your password
            database='secoperabase'  # The database to connect to, will be created if it doesn't exist
        )
        #print("Connection to MariaDB successful")
    except mysql.connector.Error as e:
        print(f"The error '{e}' occurred")
    return connection

def execute_query(connection, query):
    """Execute a given SQL query on the provided connection."""
    cursor = connection.cursor()
    try:
        cursor.execute(query)
        connection.commit()
        #print("Query executed successfully")
    except mysql.connector.Error as e:
        print(f"Message '{e}'")
########################################### Database functions
########################################### Store to SecOPERA Database function
def getRisk(projectID, componentID):
    # Create a connection to the database
    connection = create_connection()
    # Query data from the table Nodes based on 'projectID'
    cursor = connection.cursor()
    cursor.execute("SELECT MAX(impactScore) FROM CVEs WHERE projectID='"+projectID+"' AND componentID='"+componentID+"'")
    results = cursor.fetchall()
    
    risk = 0;
    if len(results) != 0:
    	risk=results[0][0]
    connection.close()
    return(risk)

def storeToSecOPERA(projectID, componentID):
    url = SecOPERA_url+'/api/tools/results/'+projectID+'/'+componentID+'/S-8/NETWORK'
    data = []
    kpiResults = []
    
    response = requests.get("http://127.0.0.1:8000/cti_search/getCVEs?projectID="+projectID+"&componentID="+componentID)
    if response.status_code == 200:
        CVE_data = response.json()
        if CVE_data['results'] :
        	#response = requests.post(url, json=CVE_data)
        	data.append( CVE_data )
    
    response = requests.get("http://127.0.0.1:8000/cti_search/getCWEs?projectID="+projectID+"&componentID="+componentID)
    if response.status_code == 200:
        CWE_data = response.json()
        if CWE_data['results'] :
        	#response = requests.post(url, json=CWE_data)
        	data.append( CWE_data )
    
    response = requests.get("http://127.0.0.1:8000/cti_search/getCAPECs?projectID="+projectID+"&componentID="+componentID)
    if response.status_code == 200:
        CAPEC_data = response.json()
        if CAPEC_data['results'] :
        	#response = requests.post(url, json=CAPEC_data)
        	data.append( CAPEC_data )
    
    risk = getRisk(projectID, componentID)
    kpiResults.append(jsonify({'kpiId': 'S3-KPI-1', 'testerAchievedValue': str(risk), 'devAchievedValue': '0'}).get_json())
    data2 = jsonify({'kpiResults': kpiResults, 'runs': data})
    
    response = requests.post(url, json=data2.get_json())
    print("----storeToSecOPERA: ")
    #print('*****************************************')
    #print("----storeToSecOPERA: ", data)
    #print('*****************************************')
    #print("----storeToSecOPERA: ", response)
########################################### Store to SecOPERA Database function
########################################### Check if CTI already exists in Database
def existingCVE(projectID, componentID, cpe_id, cve_ID):
    gmtTotal = time.gmtime() # gmtTotal stores current gmtime
    tsTotal = calendar.timegm(gmtTotal) # ts stores timestamp
    
    # Create a connection to the database
    connection = create_connection()
    # Query data from the table Nodes based on 'projectID'
    cursor = connection.cursor()
    cursor.execute("SELECT timestamp, sourceIdentifier, published, lastModified, vulnStatus, description, baseSeverity, exploitabilityScore, impactScore, reference, projectID, componentID FROM CVEs WHERE cveID='"+cve_ID+"' LIMIT 1")
    result = cursor.fetchall()
    
    if(result):
    	#Store CVE
    	cve_description = result[0][5]
    	cve_description = cve_description.replace("'", "\\'").replace('"', '\\"').replace(';', r'\;')
    	projectID_found = result[0][10]
    	componentID_found = result[0][11]
    	# Insert data into the table CVEs
    	insert_data_query = "INSERT INTO CVEs (projectID, componentID, cpeID, cveID, timestamp, sourceIdentifier, published, lastModified, vulnStatus, description, baseSeverity, exploitabilityScore, impactScore, reference) VALUES ('"+projectID+"', '"+componentID+"', '"+cpe_id+"', '"+cve_ID+"', "+str(tsTotal)+", '"+result[0][1]+"', '"+result[0][2]+"', '"+result[0][3]+"', '"+result[0][4]+"', '"+cve_description+"', '"+str(result[0][6])+"', '"+str(result[0][7])+"', '"+str(result[0][8])+"', '"+result[0][9]+"');"
    	execute_query(connection, insert_data_query)
    	
    	#Search for exploits in the MetaSploit Framework
    	exploit_search(projectID, componentID, cve_ID)
    	
    	#Get CVE's CWEs
    	response = requests.get("http://127.0.0.1:8000/cti_search/getCWEs?projectID="+projectID_found+"&componentID="+componentID_found)
    	if response.status_code == 200:
    		data = response.json()
    		if data['results'] :
    			#Store CWE
    			print("CWEs: ", data['results'])
    	
    	#Get CWE's CAPECs
    	response = requests.get("http://127.0.0.1:8000/cti_search/getCAPECs?projectID="+projectID_found+"&componentID="+componentID_found)
    	if response.status_code == 200:
    		data = response.json()
    		if data['results'] :
    			#Store CAPEC
    			print("CAPECs: ", data['results'])
    connection.close()
    return result

def existingCWE(cweID):
    # Create a connection to the database
    connection = create_connection()
    # Query data from the table Nodes based on 'projectID'
    cursor = connection.cursor()
    #cursor.execute("SELECT timestamp, description, sourceIdentifier, type, reference, likelihood FROM CWEs WHERE cweID='"+cweID+"' LIMIT 1")
    cursor.execute("SELECT timestamp, description, sourceIdentifier, type, reference FROM CWEs WHERE cweID='"+cweID+"' LIMIT 1")
    results = cursor.fetchall()
    
    #print("Query results (CWE "+cweID+"):")
    #for row in results:
        #print(row)
    connection.close()
    return results
    
def existingCAPEC(capecID):
    # Create a connection to the database
    connection = create_connection()
    # Query data from the table Nodes based on 'projectID'
    cursor = connection.cursor()
    cursor.execute("SELECT timestamp, title, description, likelihoodOfAttack, severity, reference FROM CAPECs WHERE capecID='"+capecID+"' LIMIT 1")
    results = cursor.fetchall()
    
    #print("Query results (CAPEC "+capecID+"):")
    #for row in results:
        #print(row)
    connection.close()
    return results
########################################### Check if CTI already exists in Database

########################################### Main Exploit Search function
#CVE test samples: 'CVE-2024-23747', 'CVE-2008-4250', 'CVE-2019-0708'
def exploit_search(projectID, componentID, cve_id):
    # Initialize the connection to Metasploit RPC server
    password = 'kali'
    client = MsfRpcClient(password)
    
    # Create a connection to the database
    connection = create_connection()
    
    gmtTotal = time.gmtime() # gmtTotal stores current gmtime
    tsTotal = calendar.timegm(gmtTotal) # ts stores timestamp
    # Search for the exploits related to the CVE
    exploits = client.modules.search(cve_id)
    
    # Filter the results to only include exploits
    exploit_modules = [module for module in exploits if module['type'] == 'exploit']
    
    # Print out the exploit details
    #print(f"Found {len(exploit_modules)} exploits for {cve_id}:\n")
    for exploit in exploit_modules:
        #for key, value in exploit.items():
            #print(f"{key}: {value}")
        #print('FullName: ', exploit['fullname'])
        #print('Name: ', exploit['name'])
        #print('Type: ', exploit['type'])
        #print('Rank: ', exploit['rank'])
        #print('Disclosuredate: ', exploit['disclosuredate'])
        # Insert data into the table Exploits
        insert_data_query = "INSERT INTO Exploits (projectID, componentID, cveID, timestamp, fullname, name, type, rank, disclosuredate) VALUES ('"+projectID+"', '"+componentID+"', '"+cve_id+"', "+str(tsTotal)+", '"+exploit['fullname']+"', '"+exploit['name']+"', '"+exploit['type']+"', '"+exploit['rank']+"', '"+exploit['disclosuredate']+"');"
        execute_query(connection, insert_data_query)
    connection.close()
########################################### Main Exploit Search function

########################################### Main CTI (CVE, CWE, and CAPEC) Search functions
def cti_search(projectID, componentID, cpe_id):
    # Create a connection to the database
    connection = create_connection()
    
    gmtTotal = time.gmtime() # gmtTotal stores current gmtime
    tsTotal = calendar.timegm(gmtTotal) # ts stores timestamp
    
    base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    params = {
        "cpeName": cpe_id
    }
    
    response = requests.get(base_url, params=params)
    
    if response.status_code == 200:
        result = response.json()
        #print("resultsPerPage: ", result['resultsPerPage'])
        #print("startIndex: ", result['startIndex'])
        #print("totalResults: ", result['totalResults'])
        #print("format: ", result['format'])
        #print("version: ", result['version'])
        #print("timestamp: ", result['timestamp'])
        
        #print("vulnerabilities: ", result['vulnerabilities'])
        for vuln in result['vulnerabilities']:
        	if existingCVE(projectID, componentID, cpe_id, vuln['cve']['id']):
        		break
        	print("\tcve-id: ", vuln['cve']['id'])
        	#print("\tsourceIdentifier: ", vuln['cve']['sourceIdentifier'])
        	#print("\tpublished: ", vuln['cve']['published'])
        	#print("\tlastModified: ", vuln['cve']['lastModified'])
        	#print("\tvulnStatus: ", vuln['cve']['vulnStatus'])
        	#print("\tcveTags: ", vuln['cve']['cveTags'])
        	##print("\tdescriptions: ", vuln['cve']['descriptions']) #Expand
        	#print("\tdescription: ", vuln['cve']['descriptions'][0]['value'])
        	##print("\tmetrics: ", vuln['cve']['metrics']) #Expand
        	baseSeverity=0.0
        	for metrick in vuln['cve']['metrics']:
        		if metrick=="cvssMetricV2":
        			#print("\tmetrics-baseSeverity: ", vuln['cve']['metrics'][metrick][0]['baseSeverity'])
        			baseSeverity=vuln['cve']['metrics'][metrick][0]['baseSeverity']
        		if metrick=="cvssMetricV31":
        			#print("\tmetrics-baseSeverity: ", vuln['cve']['metrics'][metrick][0]['cvssData']['baseSeverity'])
        			baseSeverity=vuln['cve']['metrics'][metrick][0]['cvssData']['baseSeverity']
        		#print("\tmetrics-exploitabilityScore: ", vuln['cve']['metrics'][metrick][0]['exploitabilityScore'])
        		#print("\tmetrics-impactScore: ", vuln['cve']['metrics'][metrick][0]['impactScore'])
        	
        	##print("\tconfigurations: ", vuln['cve']['configurations']) #Expand
        	##print("\treferences: ", vuln['cve']['references']) #Expand
        	#print("\treference: ", vuln['cve']['references'][0]['url']) #Expand
        	
        	cve_description = vuln['cve']['descriptions'][0]['value'].replace("'", "\\'").replace('"', '\\"').replace(';', r'\;')
        	# Insert data into the table CVEs
        	insert_data_query = "INSERT INTO CVEs (projectID, componentID, cpeID, cveID, timestamp, sourceIdentifier, published, lastModified, vulnStatus, description, baseSeverity, exploitabilityScore, impactScore, reference) VALUES ('"+projectID+"', '"+componentID+"', '"+cpe_id+"', '"+vuln['cve']['id']+"', "+str(tsTotal)+", '"+vuln['cve']['sourceIdentifier']+"', '"+vuln['cve']['published']+"', '"+vuln['cve']['lastModified']+"', '"+vuln['cve']['vulnStatus']+"', '"+cve_description+"', '"+str(baseSeverity)+"', '"+str(vuln['cve']['metrics'][metrick][0]['exploitabilityScore'])+"', '"+str(vuln['cve']['metrics'][metrick][0]['impactScore'])+"', '"+vuln['cve']['references'][0]['url']+"');"
        	execute_query(connection, insert_data_query)
        	
        	#Search for exploits in the MetaSploit Framework
        	exploit_search(projectID, componentID, vuln['cve']['id'])
        	
        	##print("\tweaknesses: ", vuln['cve']['weaknesses']) #Expand
        	for cwe in vuln['cve']['weaknesses']:
        		cweNUM = re.search(r"CWE-(\d+)", cwe['description'][0]['value'], re.IGNORECASE)
        		result = existingCWE(cwe['description'][0]['value'])
        		if(result):
        			timestamp = result[0][0]
        			cwe_description = result[0][1]
        			cwe_description = cwe_description.replace("'", "\\'").replace('"', '\\"').replace(';', r'\;')
        			#cwe_source = result[0][2]
        			#cwe_type = result[0][3]
        			reference = result[0][4]
        			#Likelihood_Of_Exploit = result[0][5]
        			if cweNUM:
        				fetch_cwe_description(projectID, componentID, str(cweNUM.group(1)), False)
        		else:
        		
        			#print("\t\tweaknesses-value: ", cwe['description'][0]['value'])
        			#print("\t\tweaknesses-type: ", cwe['type'])
        			#print("\t\tweaknesses-source: ", cwe['source'])
        			cweNUM = re.search(r"CWE-(\d+)", cwe['description'][0]['value'], re.IGNORECASE)
        			cwe_description = "--"
        			reference = "--"
        			Likelihood_Of_Exploit = "Undefined"
        			if cweNUM:
        				reference = "https://cwe.mitre.org/data/definitions/"+str(cweNUM.group(1))+".html"
        				#print("\t\tweaknesses-reference: ", reference)
        				cwe_description = fetch_cwe_description(projectID, componentID, str(cweNUM.group(1)), True)
        				#print("\t\t**** weaknesses-description: ", cwe_description)
        				
        				# The description typically under div with id 'Likelihood_Of_Exploit'
        				response = requests.get(reference)
        				response.raise_for_status()  # This will raise an exception for HTTP errors
        				# Parse the HTML content
        				soup = BeautifulSoup(response.text, 'html.parser')
        				Likelihood_Of_Exploit_tag = soup.find(id="oc_"+str(cweNUM.group(1))+"_Likelihood_Of_Exploit")
        				if Likelihood_Of_Exploit_tag is not None:
        					Likelihood_Of_Exploit = Likelihood_Of_Exploit_tag.get_text(strip=True)
        				#print("==== Likelihood_Of_Exploit: ", Likelihood_Of_Exploit)
        				
        			cwe_description = cwe_description.replace("'", "\\'").replace('"', '\\"').replace(';', r'\;')
        			
        			
        		
        		# Insert data into the table CWEs
        		#insert_data_query = "INSERT INTO CWEs (projectID, componentID, cveID, cweID, timestamp, description, sourceIdentifier, type, reference, likelihood) VALUES ('"+projectID+"', '"+componentID+"', '"+vuln['cve']['id']+"', '"+cwe['description'][0]['value']+"', "+str(tsTotal)+", '"+cwe_description+"', '"+cwe['source']+"', '"+cwe['type']+"', '"+reference+"', '"+Likelihood_Of_Exploit+"');"
        		insert_data_query = "INSERT INTO CWEs (projectID, componentID, cveID, cweID, timestamp, description, sourceIdentifier, type, reference) VALUES ('"+projectID+"', '"+componentID+"', '"+vuln['cve']['id']+"', '"+cwe['description'][0]['value']+"', "+str(tsTotal)+", '"+cwe_description+"', '"+cwe['source']+"', '"+cwe['type']+"', '"+reference+"');"
        		execute_query(connection, insert_data_query)
        return response.json()
    else:
        print("Failed to fetch data:", response.status_code)
        return None
    connection.close()
    storeToSecOPERA(projectID, componentID)
    
def fetch_cwe_description(projectID, componentID, cwe_id, flag):
    url = "https://cwe.mitre.org/data/definitions/"+str(cwe_id)+".html"
    try:
        response = requests.get(url)
        response.raise_for_status()  # This will raise an exception for HTTP errors

        # Parse the HTML content
        soup = BeautifulSoup(response.text, 'html.parser')
        
        description = ""
        if flag == True:
        	# The description typically under div with id 'Description'
        	description_tag = soup.find(id="oc_"+str(cwe_id)+"_Description")
        	description = description_tag.get_text(strip=True)
        	##print("==== CWE Description",description_tag.get_text(strip=True))
        
        ## CAPEC ##
        # The description typically under div with id 'Related_Attack_Patterns'
        description_tag = soup.find(id="oc_"+str(cwe_id)+"_Related_Attack_Patterns")
        ##print("==== CWE Related Attact Patterns",description_tag.get_text(strip=True))
        results = description_tag.find_all('td')
        
        counter=1
        capecID = ""
        for result in results:
        	if (counter% 2 == 0):
        		print("\t\t\tCAPEC-ID: ", capecID)
        		title = result.text.replace("'", "\\'").replace('"', '\\"').replace(';', r'\;')
        		print("\t\t\t\ttitle: ", title)
        		fetch_capec_details(projectID, componentID, "CWE-"+cwe_id, capecID, title)
        	else:
        		capecID = result.text
        	counter = counter + 1
        return description
    except requests.HTTPError:
        return "Failed to retrieve CWE or CAPEC page - HTTP Error."
    except Exception as e:
        return "An error occurred: "+str(e)

def fetch_capec_details(projectID, componentID, cwe_id, fullcapec_id, title):
    capec_id_num = re.search(r"CAPEC-(\d+)", str(fullcapec_id), re.IGNORECASE)
    capec_id = capec_id_num.group(1)
    gmtTotal = time.gmtime() # gmtTotal stores current gmtime
    tsTotal = calendar.timegm(gmtTotal) # ts stores timestamp
    
    url = "http://capec.mitre.org/data/definitions/"+str(capec_id)+".html"
    title = ""
    capec_description = ""
    likelihoodOfAttack = ""
    severity = ""
    
    try:
        # Create a connection to the database
        connection = create_connection()
        
        result = existingCAPEC(fullcapec_id)
        if(result):
        	timestamp = result[0][0]
        	title = result[0][1]
        	title = title.replace("'", "\\'").replace('"', '\\"').replace(';', r'\;')
        	capec_description = result[0][2]
        	capec_description = capec_description.replace("'", "\\'").replace('"', '\\"').replace(';', r'\;')
        	likelihoodOfAttack = result[0][3]
        	severity = result[0][4]
        	#url = result[0][5]
        else:
        	response = requests.get(url)
        	response.raise_for_status()  # This will raise an exception for HTTP errors
        	
        	# Parse the HTML content
        	soup = BeautifulSoup(response.text, 'html.parser')
        	
        	# The description typically under div with id 'Description'
        	description_tag = soup.find(id="oc_"+str(capec_id)+"_Description")
        	capec_description = description_tag.get_text(strip=True)
        	capec_description = capec_description.replace("'", "\\'").replace('"', '\\"').replace(';', r'\;')
        	#print("\t\t\t==== CAPEC Description: ", capec_description)
        	
        	# The description typically under div with id 'Likelihood Of Attack'
        	description_tag = soup.find(id="oc_"+str(capec_id)+"_Likelihood Of Attack")
        	likelihoodOfAttack = 'Undefined'
        	if description_tag is not None:
        		likelihoodOfAttack = description_tag.get_text(strip=True)
        	#print('CAPEC Likelihood Of Attack: ', likelihoodOfAttack)
        	#print("\t\t\t==== CAPEC Likelihood Of Attack: ", likelihoodOfAttack)
        	
        	# The description typically under div with id 'Typical Severity'
        	description_tag = soup.find(id="oc_"+str(capec_id)+"_Typical Severity")
        	severity = 'Undefined'
        	if description_tag is not None:
        		severity = description_tag.get_text(strip=True)
        	#print("\t\t\t==== CAPEC Typical Severity: ", severity)
        
        	##results = description_tag.find_all('td')
        
        # Insert data into the table CAPECs
        insert_data_query = "INSERT INTO CAPECs (projectID, componentID, cweID, capecID, timestamp, title, description, likelihoodOfAttack, severity, reference) VALUES ('"+projectID+"', '"+componentID+"', '"+cwe_id+"', '"+fullcapec_id+"', "+str(tsTotal)+", '"+title+"', '"+capec_description+"', '"+likelihoodOfAttack+"', '"+severity+"', '"+url+"');"
        execute_query(connection, insert_data_query)
        connection.close()
    except requests.HTTPError:
        return "Failed to retrieve CAPEC page - HTTP Error."
    except Exception as e:
        return "An error occurred: "+str(e)
########################################### Main CTI (CVE, CWE, and CAPEC) Search functions
